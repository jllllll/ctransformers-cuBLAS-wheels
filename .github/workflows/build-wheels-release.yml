name: Build Wheels & Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag of ctransformers to build'
        required: true
        type: string
  workflow_call:
    inputs:
      version:
        description: 'Version tag of ctransformers to build'
        required: true
        type: string

permissions:
  contents: write

jobs:
  build_binaries:
    name: ${{ matrix.os }} ${{ matrix.cuda }} ${{ matrix.releasetag }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-latest]
        cuda: ["11.7.1", "11.8.0", "12.0.1", "12.1.1", "12.2.0"]
        releasetag: ["AVX","AVX2"]
    defaults:
      run:
        shell: pwsh
    env:
      CUDAVER: ${{ matrix.cuda }}
      AVXVER: ${{ matrix.releasetag }}

    steps:
      - uses: actions/checkout@v3
        with:
          repository: 'marella/ctransformers'
          ref: ${{ inputs.version }}
          submodules: 'recursive'
          
      - uses: actions/setup-python@v3
        with:
          python-version: "3.10"
        
      - name: Setup Mamba
        uses: conda-incubator/setup-miniconda@v2.2.0
        with:
          activate-environment: "build"
          python-version: "3.10"
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          add-pip-as-python-dependency: true
          auto-activate-base: false
          
      - name: Install Dependencies
        run: |
          $cudaVersion = $env:CUDAVER
          $cudaChannels = ''
          $cudaNum = [int]$cudaVersion.substring($cudaVersion.LastIndexOf('.')+1)
          while ($cudaNum -ge 0) { $cudaChannels += '-c nvidia/label/cuda-' + $cudaVersion.Remove($cudaVersion.LastIndexOf('.')+1) + $cudaNum + ' '; $cudaNum-- }
          mamba install -y 'cuda' $cudaChannels.TrimEnd().Split()
          python -m pip install cmake
          
      - name: Build Binaries
        run: |
          $env:CUDA_PATH = $env:CONDA_PREFIX
          $env:CUDA_HOME = $env:CONDA_PREFIX
          $env:CUDATOOLKITDIR = $env:CONDA_PREFIX
          if ($IsLinux) {$env:LD_LIBRARY_PATH = $env:CONDA_PREFIX + '/lib:' + $env:LD_LIBRARY_PATH}
          cmake -B build "-DCT_INSTRUCTIONS=$($env:AVXVER.ToLower())" -DCT_CUBLAS=ON
          cmake --build build --config Release
        
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.releasetag }}-${{ matrix.cuda }}
          path: ./build/lib/*
          
  build_wheels:
    name: Build CUDA ${{ matrix.cuda }} ${{ matrix.releasetag }} Wheel
    runs-on: ubuntu-20.04
    needs: build_binaries
    strategy:
      matrix:
        cuda: ["11.7.1", "11.8.0", "12.0.1", "12.1.1", "12.2.0"]
        releasetag: ["AVX","AVX2"]
    defaults:
      run:
        shell: pwsh
    env:
      CUDAVER: ${{ matrix.cuda }}

    steps:
      - uses: actions/checkout@v3
        with:
          repository: 'marella/ctransformers'
          ref: ${{ inputs.version }}
          
      - uses: actions/setup-python@v3
        with:
          python-version: "3.10"
        
      - name: Remove Existing Binaries
        run: |
          Remove-Item $(Join-Path (Join-Path '.' 'ctransformers' 'lib','cuda' -resolve) '*')
          
      - uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.releasetag }}-${{ matrix.cuda }}
          path: ./ctransformers/lib/cuda
        
      - name: Build Wheel
        run: |
          python -m pip install build wheel
          $env:CT_WHEEL = '1'
          $cudaVersion = $env:CUDAVER.Remove($env:CUDAVER.LastIndexOf('.')).Replace('.','')
          python -m build --wheel -C--build-option=egg_info "-C--build-option=--tag-build=+cu$cudaVersion"
          
      - name: Upload files to a GitHub release
        id: upload-release
        uses: svenstaro/upload-release-action@2.6.1
        continue-on-error: true
        with:
          file: ./dist/*.whl
          tag: ${{ matrix.releasetag }}
          file_glob: true
          make_latest: false
          overwrite: true
        
      - uses: actions/upload-artifact@v3
        if: steps.upload-release.outcome == 'failure'
        with:
          name: ${{ matrix.releasetag }}-wheel
          path: ./dist/*.whl